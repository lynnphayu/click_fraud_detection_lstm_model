{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Hello, Colaboratory","version":"0.3.2","provenance":[{"file_id":"/v2/external/notebooks/welcome.ipynb","timestamp":1539517025302}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"colab_type":"text","id":"9J7p406abzgl"},"cell_type":"markdown","source":["<img height=\"60px\" src=\"https://colab.research.google.com/img/colab_favicon.ico\" align=\"left\" hspace=\"20px\" vspace=\"5px\">\n","\n","<h1>Welcome to Colaboratory!</h1>\n","Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. See our [FAQ](https://research.google.com/colaboratory/faq.html) for more info."]},{"metadata":{"id":"b2SM1ehyGgoP","colab_type":"code","outputId":"5361e4a7-5acd-45e1-c408-5cad6ed767d0","executionInfo":{"status":"ok","timestamp":1540652777861,"user_tz":-390,"elapsed":3137,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from google.colab import drive\n","drive.mount('./drive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Drive already mounted at ./drive; to attempt to forcibly remount, call drive.mount(\"./drive\", force_remount=True).\n"],"name":"stdout"}]},{"metadata":{"id":"IUbTMBe7L95w","colab_type":"code","outputId":"ba886d32-3249-47c4-8585-75e50fa5494f","executionInfo":{"status":"ok","timestamp":1540652783463,"user_tz":-390,"elapsed":5381,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["import numpy as np\n","from keras.callbacks import Callback\n","from sklearn.metrics import confusion_matrix, f1_score, precision_score, recall_score\n","class Metrics(Callback):\n","  def on_train_begin(self, logs={}):\n","   self.val_f1s = []\n","   self.val_recalls = []\n","   self.val_precisions = []\n","\n","  def on_epoch_end(self, epoch, logs={}):\n","   val_predict = (np.asarray(self.model.predict(self.model.validation_data[0]))).round()\n","   val_targ = self.model.validation_data[1]\n","   _val_f1 = f1_score(val_targ, val_predict)\n","   _val_recall = recall_score(val_targ, val_predict)\n","   _val_precision = precision_score(val_targ, val_predict)\n","   self.val_f1s.append(_val_f1)\n","   self.val_recalls.append(_val_recall)\n","   self.val_precisions.append(_val_precision)\n","   print(\" — val_f1: %f — val_precision: %f — val_recall %f\"%(_val_f1, _val_precision, _val_recall))\n","   return\n"," \n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"46pB7AAMR4fX","colab_type":"code","colab":{}},"cell_type":"code","source":["import tensorflow as tf\n","\n","\n","def f1_score(y_true, y_pred):\n","    y_true = tf.cast(y_true, \"int32\")\n","    y_pred = tf.cast(tf.round(y_pred), \"int32\") # implicit 0.5 threshold via tf.round\n","    y_correct = y_true * y_pred\n","    sum_true = tf.reduce_sum(y_true, axis=1)\n","    sum_pred = tf.reduce_sum(y_pred, axis=1)\n","    sum_correct = tf.reduce_sum(y_correct, axis=1)\n","    precision = sum_correct / sum_pred\n","    recall = sum_correct / sum_true\n","    f_score = 2 * precision * recall / (precision + recall)\n","    f_score = tf.where(tf.is_nan(f_score), tf.zeros_like(f_score), f_score)\n","    return tf.reduce_mean(f_score)\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"uEeM9iNM-tpO","colab_type":"code","outputId":"cc1e3f0b-8e73-4b78-d437-7ff7daaa6609","executionInfo":{"status":"ok","timestamp":1540652790516,"user_tz":-390,"elapsed":3147,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":969}},"cell_type":"code","source":["from keras.layers import Input, Embedding, LSTM, Dense, concatenate, SpatialDropout1D, Flatten\n","from keras.models import Model\n","embedding_n = 50\n","lookback_len = 50\n","in_ip = Input(shape=[lookback_len], name = 'ip')\n","emb_ip = Embedding(364779, embedding_n)(in_ip)\n","in_app = Input(shape=[lookback_len], name = 'app')\n","emb_app = Embedding(769, embedding_n)(in_app)\n","in_device = Input(shape=[lookback_len], name = 'device')\n","emb_device = Embedding(4228, embedding_n)(in_device)\n","in_os = Input(shape=[lookback_len], name = 'os')\n","emb_os = Embedding(957, embedding_n)(in_os)\n","in_channel = Input(shape=[lookback_len], name = 'channel')\n","emb_channel = Embedding(501, embedding_n)(in_channel) \n","in_hour = Input(shape=[lookback_len], name = 'hour')\n","emb_hour = Embedding(24, embedding_n)(in_hour)\n","in_day = Input(shape=[lookback_len], name = 'day')\n","emb_day = Embedding(31, embedding_n)(in_day)\n","in_wday = Input(shape=[lookback_len], name = 'wday')\n","emb_wday = Embedding(7, embedding_n)(in_wday)\n","embedded_n = concatenate([(emb_ip),(emb_app),(emb_device),(emb_os),(emb_channel),(emb_hour),(emb_day),(emb_wday)])\n","\n","s_dout = SpatialDropout1D(0.2)(embedded_n)\n","lstm1 = LSTM(128,dropout = 0.2, recurrent_dropout = 0.2, return_sequences=True)(s_dout)\n","lstm2 = LSTM(128,dropout = 0.2, recurrent_dropout = 0.2)(lstm1)\n","out = Dense(1, activation='sigmoid',input_shape=(50,))(lstm2)\n","model = Model(inputs=[in_ip,in_app,in_device,in_os,in_channel,in_hour,in_day,in_wday], outputs=out)\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=[f1_score])\n","\n","model.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","ip (InputLayer)                 (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","app (InputLayer)                (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","device (InputLayer)             (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","os (InputLayer)                 (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","channel (InputLayer)            (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","hour (InputLayer)               (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","day (InputLayer)                (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","wday (InputLayer)               (None, 50)           0                                            \n","__________________________________________________________________________________________________\n","embedding_1 (Embedding)         (None, 50, 50)       18238950    ip[0][0]                         \n","__________________________________________________________________________________________________\n","embedding_2 (Embedding)         (None, 50, 50)       38450       app[0][0]                        \n","__________________________________________________________________________________________________\n","embedding_3 (Embedding)         (None, 50, 50)       211400      device[0][0]                     \n","__________________________________________________________________________________________________\n","embedding_4 (Embedding)         (None, 50, 50)       47850       os[0][0]                         \n","__________________________________________________________________________________________________\n","embedding_5 (Embedding)         (None, 50, 50)       25050       channel[0][0]                    \n","__________________________________________________________________________________________________\n","embedding_6 (Embedding)         (None, 50, 50)       1200        hour[0][0]                       \n","__________________________________________________________________________________________________\n","embedding_7 (Embedding)         (None, 50, 50)       1550        day[0][0]                        \n","__________________________________________________________________________________________________\n","embedding_8 (Embedding)         (None, 50, 50)       350         wday[0][0]                       \n","__________________________________________________________________________________________________\n","concatenate_1 (Concatenate)     (None, 50, 400)      0           embedding_1[0][0]                \n","                                                                 embedding_2[0][0]                \n","                                                                 embedding_3[0][0]                \n","                                                                 embedding_4[0][0]                \n","                                                                 embedding_5[0][0]                \n","                                                                 embedding_6[0][0]                \n","                                                                 embedding_7[0][0]                \n","                                                                 embedding_8[0][0]                \n","__________________________________________________________________________________________________\n","spatial_dropout1d_1 (SpatialDro (None, 50, 400)      0           concatenate_1[0][0]              \n","__________________________________________________________________________________________________\n","lstm_1 (LSTM)                   (None, 50, 128)      270848      spatial_dropout1d_1[0][0]        \n","__________________________________________________________________________________________________\n","lstm_2 (LSTM)                   (None, 128)          131584      lstm_1[0][0]                     \n","__________________________________________________________________________________________________\n","dense_1 (Dense)                 (None, 1)            129         lstm_2[0][0]                     \n","==================================================================================================\n","Total params: 18,967,361\n","Trainable params: 18,967,361\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"metadata":{"id":"lPnyXUR4IDg1","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","\n","\n","def plot_confusion_matrix(cm,\n","                          target_names,\n","                          title='Confusion matrix',\n","                          cmap=None,\n","                          normalize=True):\n","\n","    import matplotlib.pyplot as plt\n","    import numpy as np\n","    import itertools\n","\n","    accuracy = np.trace(cm) / float(np.sum(cm))\n","    misclass = 1 - accuracy\n","\n","    if cmap is None:\n","        cmap = plt.get_cmap('Blues')\n","\n","    plt.figure(figsize=(8, 6))\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","\n","    if target_names is not None:\n","        tick_marks = np.arange(len(target_names))\n","        plt.xticks(tick_marks, target_names, rotation=45)\n","        plt.yticks(tick_marks, target_names)\n","\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","\n","\n","    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        if normalize:\n","            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","        else:\n","            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n","    plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3W9XMyhNHCQr","colab_type":"code","outputId":"446f867c-c646-44b5-d578-0b8e318ebae8","executionInfo":{"status":"ok","timestamp":1540652795426,"user_tz":-390,"elapsed":1465,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["print ('Good luck')\n","\n","import pandas as pd\n","import numpy as np\n","import warnings\n","warnings.filterwarnings('ignore')\n","import os\n","import gc\n","\n","path = './'\n","dtypes = {\n","        'ip'            : 'uint32',\n","        'app'           : 'uint16',\n","        'device'        : 'uint16',\n","        'os'            : 'uint16',\n","        'channel'       : 'uint16',\n","        'is_attributed' : 'uint8',\n","        'click_id'      : 'uint32'\n","        }"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Good luck\n"],"name":"stdout"}]},{"metadata":{"id":"AFDlvtCN-IJz","colab_type":"code","colab":{}},"cell_type":"code","source":["def create_dataset(dataset, look_back=50):\n","    dataX = []\n","    for i in range(len(dataset)-look_back):\n","        a = dataset[i:(i+look_back)]\n","        dataX.append(a)\n","    return np.array(dataX)\n","   \n","def get_keras_data(dataset):\n","    X = {\n","\t\t'ip': np.array(dataset.ip),\n","        'app': np.array(dataset.app),\n","        'channel': np.array(dataset.channel),\n","        'device': np.array(dataset.device),\n","        'os': np.array(dataset.os),\n","        'hour': np.array(dataset.hour),\n","        'day': np.array(dataset.day),\n","        'wday': np.array(dataset.wday),\n","    }\n","    return X"],"execution_count":0,"outputs":[]},{"metadata":{"id":"2ZBhG16giAKk","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train = pd.read_csv(\"./drive/My Drive/train.csv\",usecols=['ip','app','device','os','channel','click_time','is_attributed'],nrows=3000000)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OQXi_kPr9b6t","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train = pd.read_csv(\"./drive/My Drive/x_train_5million_samples.csv\", usecols=['ip','app','device','os', 'channel', 'hour', 'day','wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"yd8c9uobkld6","colab_type":"code","colab":{}},"cell_type":"code","source":["y_train = x_train['is_attributed']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Sv2Wcu6dk6IL","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train['hour'] = pd.to_datetime(x_train.click_time).dt.hour.astype('uint8')\n","x_train['day'] = pd.to_datetime(x_train.click_time).dt.day.astype('uint8')\n","x_train['wday']  = pd.to_datetime(x_train.click_time).dt.dayofweek.astype('uint8')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nJ9BecPllcE7","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train.drop([ 'click_time','is_attributed'],1,inplace=True)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1SZCEoJj9nDE","colab_type":"code","colab":{}},"cell_type":"code","source":["y_train = pd.read_csv('./drive/My Drive/y_train_5million_samples.csv')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DMGmjWPTB5WO","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train = x_train.sample(n=3000000)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Be_FPy2vB5UF","colab_type":"code","colab":{}},"cell_type":"code","source":["y_train = y_train.loc[x_train.index]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"mR9YW1Xu9vHw","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train = get_keras_data(x_train)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"WaG86b139vDg","colab_type":"code","colab":{}},"cell_type":"code","source":["x_train['ip'] = create_dataset(x_train['ip'])\n","x_train['app'] = create_dataset(x_train['app'])\n","x_train['channel'] = create_dataset(x_train['channel'])\n","x_train['device'] = create_dataset(x_train['device'])\n","x_train['os'] = create_dataset(x_train['os'])\n","x_train['hour'] = create_dataset(x_train['hour'])\n","x_train['day'] = create_dataset(x_train['day'])\n","x_train['wday'] = create_dataset(x_train['wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5xNeKGCy9vBj","colab_type":"code","colab":{}},"cell_type":"code","source":["y_train = y_train[49:2999999]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"cjxqRYqzPOVD","colab_type":"code","outputId":"d3260975-e556-4374-e24c-caed73462b42","executionInfo":{"status":"error","timestamp":1539679677321,"user_tz":-390,"elapsed":1054,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":708}},"cell_type":"code","source":["y_train = y_train['is_attributed']"],"execution_count":0,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   2559\u001b[0m             return self._engine.get_value(s, k,\n\u001b[0;32m-> 2560\u001b[0;31m                                           tz=getattr(series.dtype, 'tz', None))\n\u001b[0m\u001b[1;32m   2561\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_value\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index._bin_search\u001b[0;34m()\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'numpy.ndarray' and 'str'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-00d8064853e0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_train\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'is_attributed'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    621\u001b[0m         \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_apply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 623\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_value\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    624\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    625\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_value\u001b[0;34m(self, series, key)\u001b[0m\n\u001b[1;32m   2578\u001b[0m             \u001b[0;31m# python 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2579\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pragma: no cover\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2580\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2581\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2582\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: is_attributed"]}]},{"metadata":{"id":"uc2kxqFKM-F2","colab_type":"code","colab":{}},"cell_type":"code","source":["from keras.callbacks import TensorBoard \n","tbCallBack = TensorBoard(log_dir='./Graphlog', histogram_freq=0, write_graph=True, write_images=True)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"eN3FRm-c9u_B","colab_type":"code","outputId":"6e7f569f-e5c0-4102-c6f4-713241c3446f","executionInfo":{"status":"ok","timestamp":1539687407846,"user_tz":-390,"elapsed":6361563,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":374}},"cell_type":"code","source":["model.fit(x_train, y_train, batch_size=2500, epochs=10, shuffle=True, verbose=2, callbacks=[tbCallBack], validation_split=0.2) \n","model.save_weights('lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5')\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Train on 2399960 samples, validate on 599990 samples\n","Epoch 1/10\n"," - 770s - loss: 0.0121 - f1_score: 6.3334e-05 - val_loss: 0.0067 - val_f1_score: 4.0001e-04\n","Epoch 2/10\n"," - 768s - loss: 0.0057 - f1_score: 4.6751e-04 - val_loss: 0.0063 - val_f1_score: 5.6834e-04\n","Epoch 3/10\n"," - 769s - loss: 0.0046 - f1_score: 7.7293e-04 - val_loss: 0.0065 - val_f1_score: 6.7668e-04\n","Epoch 4/10\n"," - 769s - loss: 0.0041 - f1_score: 8.7710e-04 - val_loss: 0.0071 - val_f1_score: 7.0668e-04\n","Epoch 5/10\n"," - 768s - loss: 0.0035 - f1_score: 9.8127e-04 - val_loss: 0.0086 - val_f1_score: 8.1835e-04\n","Epoch 6/10\n"," - 768s - loss: 0.0025 - f1_score: 0.0012 - val_loss: 0.0084 - val_f1_score: 5.9668e-04\n","Epoch 7/10\n"," - 769s - loss: 0.0018 - f1_score: 0.0014 - val_loss: 0.0097 - val_f1_score: 6.8501e-04\n","Epoch 8/10\n"," - 770s - loss: 0.0012 - f1_score: 0.0015 - val_loss: 0.0123 - val_f1_score: 6.0334e-04\n","Epoch 9/10\n"," - 769s - loss: 8.9908e-04 - f1_score: 0.0015 - val_loss: 0.0130 - val_f1_score: 6.5668e-04\n","Epoch 10/10\n"," - 770s - loss: 6.6646e-04 - f1_score: 0.0016 - val_loss: 0.0134 - val_f1_score: 6.4334e-04\n"],"name":"stdout"}]},{"metadata":{"id":"TYHRoYweEAeH","colab_type":"code","outputId":"da992e51-59ff-479f-bb35-d51767bd5e8b","executionInfo":{"status":"ok","timestamp":1539687481123,"user_tz":-390,"elapsed":30125,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# Authenticate and create the PyDrive client.\n","# This only needs to be done once in a notebook.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)\n","uploaded = drive.CreateFile({'title': 'lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5'})\n","uploaded.SetContentFile('lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5')\n","uploaded.Upload()\n","uploaded = drive.CreateFile({'title': '/events.out.tfevents.1539679717.ba3c9096201c'})\n","uploaded.SetContentFile('Graphlog/events.out.tfevents.1539679717.ba3c9096201c')\n","uploaded.Upload()\n","print('Uploaded file with ID {}'.format(uploaded.get('id')))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Uploaded file with ID 16wBqClPv424a8IZ-xECfdbDGl_8--_7r\n"],"name":"stdout"}]},{"metadata":{"id":"K_Pt1teE1oiA","colab_type":"code","outputId":"494bab50-696f-4377-8eb2-a47e52287a7b","executionInfo":{"status":"ok","timestamp":1539625665117,"user_tz":-390,"elapsed":1381,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["del x_train\n","gc.collect()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{"tags":[]},"execution_count":23}]},{"metadata":{"id":"0GHXAogK3ABM","colab_type":"code","colab":{}},"cell_type":"code","source":["!pip install -U -q PyDrive\n","from pydrive.auth import GoogleAuth\n","from pydrive.drive import GoogleDrive\n","from google.colab import auth\n","from oauth2client.client import GoogleCredentials\n","\n","# Authenticate and create the PyDrive client.\n","# This only needs to be done once in a notebook.\n","auth.authenticate_user()\n","gauth = GoogleAuth()\n","gauth.credentials = GoogleCredentials.get_application_default()\n","drive = GoogleDrive(gauth)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9SOGwBJo3H6b","colab_type":"code","outputId":"6f803dbb-42d8-4ecf-97a3-326ad3c66d3c","executionInfo":{"status":"ok","timestamp":1539626045811,"user_tz":-390,"elapsed":4252,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["uploaded = drive.CreateFile({'title': 'lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5'})\n","uploaded.SetContentFile('lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5')\n","uploaded.Upload()\n","uploaded = drive.CreateFile({'title': 'events.out.tfevents.1539638716.ceda0c631efe'})\n","uploaded.SetContentFile('Graphlog/events.out.tfevents.1539638716.ceda0c631efe')\n","uploaded.Upload()\n","print('Uploaded file with ID {}'.format(uploaded.get('id')))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Uploaded file with ID 11hXEGnODOwH7SQja6tqgw6j5_gBeHHyd\n"],"name":"stdout"}]},{"metadata":{"id":"F7CbJeKe3Hu8","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"DMv6jRD6XjlP","colab_type":"code","colab":{}},"cell_type":"code","source":["model.load_weights('drive/My Drive/lstm_series_integrated_10epoch_f2score_opttimized_5mill_beta2.h5')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1ZG0FvY_9u6v","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test = pd.read_csv(\"drive/My Drive/train_5mil_3to8.csv\", usecols=['ip','app','device','os', 'channel', 'hour', 'day','wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GnW4fW06Bwz2","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test = pd.read_csv(\"drive/My Drive/test_5mil_3to8.csv\", usecols=['is_attributed'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"bKunIKstB4mL","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test_1 = y_test[49:999999]\n","y_test_2 = y_test[1000049:1999999]\n","y_test_3 = y_test[2000049:2999999]\n","y_test_4 = y_test[3000049:3999999]\n","y_test_5 = y_test[4000049:4999999]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NS6guu57Rf2m","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test_1 = x_test[0:1000000]\n","x_test_1 = get_keras_data(x_test_1)\n","x_test_1['ip'] = create_dataset(x_test_1['ip'])\n","x_test_1['app'] = create_dataset(x_test_1['app'])\n","x_test_1['channel'] = create_dataset(x_test_1['channel'])\n","x_test_1['device'] = create_dataset(x_test_1['device'])\n","x_test_1['os'] = create_dataset(x_test_1['os'])\n","x_test_1['hour'] = create_dataset(x_test_1['hour'])\n","x_test_1['day'] = create_dataset(x_test_1['day'])\n","x_test_1['wday'] = create_dataset(x_test_1['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test_1.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test_1, batch_size=10000, verbose=2)\n","x_test_ans.to_csv('./x_test_1_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_1_final.csv'})\n","uploaded.SetContentFile('x_test_1_final.csv')\n","uploaded.Upload()\n","del x_test_1"],"execution_count":0,"outputs":[]},{"metadata":{"id":"YHuIqFM6U2iG","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test_2 = x_test[1000000:2000000]\n","x_test_2 = get_keras_data(x_test_2)\n","x_test_2['ip'] = create_dataset(x_test_2['ip'])\n","x_test_2['app'] = create_dataset(x_test_2['app'])\n","x_test_2['channel'] = create_dataset(x_test_2['channel'])\n","x_test_2['device'] = create_dataset(x_test_2['device'])\n","x_test_2['os'] = create_dataset(x_test_2['os'])\n","x_test_2['hour'] = create_dataset(x_test_2['hour'])\n","x_test_2['day'] = create_dataset(x_test_2['day'])\n","x_test_2['wday'] = create_dataset(x_test_2['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test_2.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test_2, batch_size=10000, verbose=2)\n","x_test_ans.to_csv('./x_test_2_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_2_final.csv'})\n","uploaded.SetContentFile('x_test_2_final.csv')\n","uploaded.Upload()\n","del x_test_2"],"execution_count":0,"outputs":[]},{"metadata":{"id":"GsNigFVkVIBk","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test_3 = x_test[2000000:3000000]\n","x_test_3 = get_keras_data(x_test_3)\n","x_test_3['ip'] = create_dataset(x_test_3['ip'])\n","x_test_3['app'] = create_dataset(x_test_3['app'])\n","x_test_3['channel'] = create_dataset(x_test_3['channel'])\n","x_test_3['device'] = create_dataset(x_test_3['device'])\n","x_test_3['os'] = create_dataset(x_test_3['os'])\n","x_test_3['hour'] = create_dataset(x_test_3['hour'])\n","x_test_3['day'] = create_dataset(x_test_3['day'])\n","x_test_3['wday'] = create_dataset(x_test_3['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test_3.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test_3, batch_size=10000, verbose=2)\n","x_test_ans.to_csv('./x_test_3_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_3_final.csv'})\n","uploaded.SetContentFile('x_test_3_final.csv')\n","uploaded.Upload()\n","del x_test_3"],"execution_count":0,"outputs":[]},{"metadata":{"id":"EBg7GROfVPle","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test_4 = x_test[3000000:4000000]\n","x_test_4 = get_keras_data(x_test_4)\n","x_test_4['ip'] = create_dataset(x_test_4['ip'])\n","x_test_4['app'] = create_dataset(x_test_4['app'])\n","x_test_4['channel'] = create_dataset(x_test_4['channel'])\n","x_test_4['device'] = create_dataset(x_test_4['device'])\n","x_test_4['os'] = create_dataset(x_test_4['os'])\n","x_test_4['hour'] = create_dataset(x_test_4['hour'])\n","x_test_4['day'] = create_dataset(x_test_4['day'])\n","x_test_4['wday'] = create_dataset(x_test_4['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test_4.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test_4, batch_size=10000, verbose=2)\n","x_test_ans.to_csv('./x_test_4_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_4_final.csv'})\n","uploaded.SetContentFile('x_test_4_final.csv')\n","uploaded.Upload()\n","del x_test_4"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Lk5RO5Z2Ct52","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test = get_keras_data(x_test)\n","x_test['ip'] = create_dataset(x_test['ip'])\n","x_test['app'] = create_dataset(x_test['app'])\n","x_test['channel'] = create_dataset(x_test['channel'])\n","x_test['device'] = create_dataset(x_test['device'])\n","x_test['os'] = create_dataset(x_test['os'])\n","x_test['hour'] = create_dataset(x_test['hour'])\n","x_test['day'] = create_dataset(x_test['day'])\n","x_test['wday'] = create_dataset(x_test['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test, batch_size=5000, verbose=5)\n","x_test_ans.to_csv('./x_test_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_final.csv'})\n","uploaded.SetContentFile('x_test_final.csv')\n","uploaded.Upload()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"kvxq_5LqVTKQ","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test_5 = x_test[4000000:5000000]\n","x_test_5 = get_keras_data(x_test_5)\n","x_test_5['ip'] = create_dataset(x_test_5['ip'])\n","x_test_5['app'] = create_dataset(x_test_5['app'])\n","x_test_5['channel'] = create_dataset(x_test_5['channel'])\n","x_test_5['device'] = create_dataset(x_test_5['device'])\n","x_test_5['os'] = create_dataset(x_test_5['os'])\n","x_test_5['hour'] = create_dataset(x_test_5['hour'])\n","x_test_5['day'] = create_dataset(x_test_5['day'])\n","x_test_5['wday'] = create_dataset(x_test_5['wday'])\n","x_test_ans = pd.DataFrame()\n","x_test_ans['id']= y_test_5.index.tolist()\n","x_test_ans['is_attributed'] = model.predict(x_test_5, batch_size=10000, verbose=2)\n","x_test_ans.to_csv('./x_test_5_final.csv')\n","uploaded = drive.CreateFile({'title': 'x_test_5_final.csv'})\n","uploaded.SetContentFile('x_test_5_final.csv')\n","uploaded.Upload()\n","del x_test_5"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lALJZMFgCtwn","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"xZt19Zki-9rB","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test = get_keras_data(x_test)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"IOl9lH8q9-8m","colab_type":"code","outputId":"2ca4d3d9-b239-4afd-f9f5-7f350c3e4a8b","executionInfo":{"status":"error","timestamp":1540375324477,"user_tz":420,"elapsed":2119,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":163}},"cell_type":"code","source":["y_test = y_test[49:999999]"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-7abe41298e80>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m49\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;36m999999\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}]},{"metadata":{"id":"Yl9JLVRT9uu2","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test['ip'] = create_dataset(x_test['ip'])\n","x_test['app'] = create_dataset(x_test['app'])\n","x_test['channel'] = create_dataset(x_test['channel'])\n","x_test['device'] = create_dataset(x_test['device'])\n","x_test['os'] = create_dataset(x_test['os'])\n","x_test['hour'] = create_dataset(x_test['hour'])\n","x_test['day'] = create_dataset(x_test['day'])\n","x_test['wday'] = create_dataset(x_test['wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OeBlpnbSFXp5","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer = model.predict(x_test, batch_size=10000, verbose=2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nTq9cM0yFXnT","colab_type":"code","outputId":"1dac3d39-3b48-431a-d977-8f49ff6fb68f","executionInfo":{"status":"ok","timestamp":1539696139969,"user_tz":-390,"elapsed":2215,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["ans_buffer[ans_buffer>0.7].shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7278,)"]},"metadata":{"tags":[]},"execution_count":131}]},{"metadata":{"id":"-5gsK1bLFXkz","colab_type":"code","colab":{}},"cell_type":"code","source":["sevenpoint5 = ans_buffer.copy()\n","ans_buffer_half_thres = ans_buffer.copy()\n","ans_buffer_quarter_thres = ans_buffer.copy()\n","ans_buffer_onetenth_thres = ans_buffer.copy()\n","ans_buffer_onetwentieth_thres = ans_buffer.copy()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"nALpvDOtFXid","colab_type":"code","colab":{}},"cell_type":"code","source":["sevenpoint5[sevenpoint5 >= 0.7] = 1\n","sevenpoint5[sevenpoint5< 0.7] = 0\n","ans_buffer_half_thres[ans_buffer_half_thres >= 0.5] = 1\n","ans_buffer_half_thres[ans_buffer_half_thres < 0.5] = 0\n","ans_buffer_quarter_thres[ans_buffer_quarter_thres >= 0.25] = 1\n","ans_buffer_quarter_thres[ans_buffer_quarter_thres < 0.25] = 0\n","ans_buffer_onetenth_thres[ans_buffer_onetenth_thres >= 0.1] = 1\n","ans_buffer_onetenth_thres[ans_buffer_onetenth_thres < 0.1] = 0\n","ans_buffer_onetwentieth_thres[ans_buffer_onetwentieth_thres >= 0.05] = 1\n","ans_buffer_onetwentieth_thres[ans_buffer_onetwentieth_thres < 0.05] = 0\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ncWypDaxA2VA","colab_type":"code","outputId":"66d98512-fdea-4b19-a3f6-705adcdad125","executionInfo":{"status":"ok","timestamp":1539696357152,"user_tz":-390,"elapsed":1387,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["y_test.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(999950,)"]},"metadata":{"tags":[]},"execution_count":160}]},{"metadata":{"id":"0ZUNBLbjFXf2","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.metrics import confusion_matrix,f1_score"],"execution_count":0,"outputs":[]},{"metadata":{"id":"mJWThM2HUh-t","colab_type":"code","outputId":"93e2671d-ccc9-4f57-b864-495c835d9999","executionInfo":{"status":"ok","timestamp":1539696360882,"user_tz":-390,"elapsed":2224,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["f1_score(y_test,ans_buffer_half_thres)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.0895550706764064"]},"metadata":{"tags":[]},"execution_count":162}]},{"metadata":{"id":"FAJA3V7_Uh1p","colab_type":"code","outputId":"8b21ee33-d9fc-4c5d-ee69-171bc5d8b7e4","executionInfo":{"status":"ok","timestamp":1539696364189,"user_tz":-390,"elapsed":1381,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["f1_score(y_test,ans_buffer_quarter_thres)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.08348348348348349"]},"metadata":{"tags":[]},"execution_count":164}]},{"metadata":{"id":"gVvQNagqUhuk","colab_type":"code","outputId":"0d2cb0d1-ffd6-41b8-db00-6aa8d2371bc6","executionInfo":{"status":"ok","timestamp":1539696365981,"user_tz":-390,"elapsed":1617,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["f1_score(y_test,ans_buffer_onetenth_thres)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.07523849523009539"]},"metadata":{"tags":[]},"execution_count":165}]},{"metadata":{"id":"bUduKrnsUhlB","colab_type":"code","outputId":"bfa2c706-fafb-4efd-f5d9-c64530f93f63","executionInfo":{"status":"ok","timestamp":1539696294502,"user_tz":-390,"elapsed":2690,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["f1_score(y_test,ans_buffer_onetwentieth_thres)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.06989079563182526"]},"metadata":{"tags":[]},"execution_count":157}]},{"metadata":{"id":"EiNSL-1tM-SJ","colab_type":"code","colab":{}},"cell_type":"code","source":["\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"EjkncBrrFXbI","colab_type":"code","outputId":"cd2a48f7-c974-463a-a43d-489c1413fb12","executionInfo":{"status":"ok","timestamp":1539696421625,"user_tz":-390,"elapsed":4825,"user":{"displayName":"Lynn Phay U","photoUrl":"","userId":"16915710554887829024"}},"colab":{"base_uri":"https://localhost:8080/","height":463}},"cell_type":"code","source":["plot_confusion_matrix(confusion_matrix(y_test,sevenpoint5),target_names=['not_attributed','attributed'],normalize=False)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nl4YDREREDGX4cIBCgIiImMvwToDZRy8iImIwdQJERMRcGg4QERExlOHDAQoBIiJiLsM7AWZHIBER\nEYOpEyAiIubScICIiIihFAJEREQM5WD2nACFABERMZfhnQCzj15ERMRg6gSIiIi5DD9FUCFARETM\nZfhwgEKAiIiYy/BOgNkRSERExGDqBIiIiLk0HCAiImIow4cDFAJERMRchncCzD56ERERg6kTICIi\n5tJwgIiIiKEMHw5QCBAREXMZ3gkwOwKJiIgYTJ0AERExl4YDREREDKUQICIiYijD5wQoBIiIiLkM\n7wSYffQiIiIGUydARETMpeEAERERQxk+HKAQICIi5jK8E2B2BBIRETGYOgEiImIsi+GdAIUAEREx\nlkKAiIiIqczOAJoTICIiYip1AkRExFgaDhARETGUQoCIiIihFAJEREQMZXoI0MRAERERQ6kTICIi\n5jK7EaAQICIi5jJ9OEAhQEREjGV6CNCcABEREUOpEyAiIsYyvROgECAiIsZSCBARETGV2RlAcwJE\nRERMpU6AiIgYK6uHA+Lj4xkyZAiXL18mOTmZfv364ePjQ3BwMACVK1dm1KhRAMyePZu1a9disVjo\n378/DRo04OrVqwwePJirV6/i6urK5MmTKViwIL/++isffvghjo6O1K9fn379+gEwfvx4du/ejcVi\nYdiwYfj7+9+1PoUAERExVlaHgBUrVlC2bFkGDx5MVFQUzz//PD4+PvY36MGDB7Nx40bKlStHaGgo\n33zzDXFxcXTt2pXHH3+c+fPn8+ijj9K7d28WL17M559/zptvvsnYsWOZM2cOhQsXpnv37jRv3pxL\nly7x559/snjxYo4ePcqwYcNYvHjxXevTcICIiBjLYrFk6JEeT09PYmNjAbhy5QoFCxbk9OnT9k/o\njRo1IiIigq1bt1KvXj2cnZ3x8vKiePHiHDlyhIiICJo1a5Zm3ZMnT+Lh4UHRokVxcHCgQYMGRERE\nEBERQdOmTQEoX748ly9fJi4u7q71KQSIiIi5LBl8pKN169acOXOGZs2a0b17d9566y3c3d3tzxcq\nVIjo6GguXLiAl5eXfbmXl9ctywsVKsT58+eJjo6+47qenp63LL8bDQeIiIhkkZUrV1KsWDHmzJnD\nwYMH6devH25ubvbnbTbbbbe73fI7rXsn97K+QoCIiBgrq+cEREZG8vjjjwNQpUoVEhMTSUlJsT8f\n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\nRETEWKZfNlghQEREzGV4ClAIEBERY5l+K2GdHSAiImIodQJERMRYWX12wP1OIUBERIxleAZQCBAR\nEYMZngI0J0BERMRQ6gSIiIixTD87QCFARESMpYmBIiIihjI8AygEiIiIwQxPAZoYKCIiYih1AkRE\nxFiaGCgiImIoTQwUERExlOEZQHMCRERETKVOgIiImMvwVoBCgIiIGEsTA0VERAxl+sRAzQkQEREx\nlDoBIiJiLMMbAQoBIiJiMMNTgEKAiIgYy/SJgZoTICIiYih1AkRExFimnx2gECAiIsYyPAMoBIiI\niLnUCRARETGW2SlAEwNFREQMpU6AiIgYS8MBIiIihjI8AygEiIiIuUzvBGhOgIiIiKHUCRAREWOZ\nftlghQARETGX2RlAIUBERMxleAbQnAARERFTqRMgIiLGMv3sAIUAERExliYGioiImMrsDKAQICIi\n5jI8A2hioIiIiKnUCRAREWNpYqCIiIihNDFQRETEUKZ3AjQnQERExFAKASIiIobScICIiBjL9OEA\nhQARETGW6RMDNRwgIiJiKHUCRETEWBoOEBERMZThGUAhQEREDGZ4ClAIEBERY2lioIiIiBhJnQAR\nETGWJgaKiIgYyvAMoBAgIiIGMzwFaE6AiIiIodQJEBERY5l+doBCgIiIGMv0iYEWm81my+kiRERE\nJPtpToCIiIihFAJEREQMpRAgIiJiKIUAERERQykEiIiIGEohQERExFAKASIiIoZSCBAjHTt2LKdL\nEAP99ttv/PLLLzldhoidQoAYZ+vWrbz//vts27Ytp0sRw5w8eZJx48bpd0/uG47BwcHBOV2ESHZy\nd3cnNTWVH3/8EW9vb4oWLZrTJUkuZ7PZsFgsVK5cmfPnz7No0SKKFClCmTJlcro0MZw6AWIMq9UK\n3AgBJ06cID4+nvnz57N9+/YcrkxyO8v/X6B+8eLFREVFUbNmTYYPH66hAclx6gSIMSwWCzabjVdf\nfRVPT0+6detGQkICmzdvxtPTk2LFiuV0iZJL2Ww2oqOjmTFjBkOHDqVNmzZ4eXnx8ccfU6JECXUE\nJMeoEyC53s0OANwIAkWLFqV169b4+fnRunVrSpUqxVdffcWWLVtysErJbf5+bzaLxYKvry+VKlXi\nq6++IikpibZt2/LMM88waNAgdu3alYOViskUAiRXS01NxcHhxq/5qVOnsFqteHt78+mnn5Kamkrx\n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\nkDIAAAAASUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fa8e52cbd68>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"NBZvLyNQFXQS","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"93vJ0pEwIGPa","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"3gOLxGHlIGL6","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"g9SfjxgaIGJF","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"BwM_MvUDIGFh","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"hO84CklHIGDB","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"o9i4hxvCIGAg","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"rrV7ETwQIF-H","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"AtVDcCGkIF7r","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"H88gfH1tIF41","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"HQ7fB2M8IF0i","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"3RibQ-tCIFxZ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"6oqIJFKTFXNU","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Eo1U7g8z9uny","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"hco4EUR-HCTL","colab_type":"code","colab":{}},"cell_type":"code","source":["test_df = pd.read_csv(\"./drive/My Drive/x_test_million_sample.csv\", usecols=['ip','app','device','os', 'channel', 'hour', 'day','wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"6gWx-YVnrBEb","colab_type":"code","colab":{}},"cell_type":"code","source":["test_df.head()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Upr-HS3ArBJa","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test = get_keras_data(test_df)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Zp9gD51hrBHZ","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test['ip'] = create_dataset(x_test['ip'])\n","x_test['app'] = create_dataset(x_test['app'])\n","x_test['channel'] = create_dataset(x_test['channel'])\n","x_test['device'] = create_dataset(x_test['device'])\n","x_test['os'] = create_dataset(x_test['os'])\n","x_test['hour'] = create_dataset(x_test['hour'])\n","x_test['day'] = create_dataset(x_test['day'])\n","x_test['wday'] = create_dataset(x_test['wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"_CfOpQtQ0k0j","colab_type":"code","colab":{}},"cell_type":"code","source":["x_test['ip'][0]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"5UoYKhaI0k58","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test = pd.read_csv(\"./drive/My Drive/y_test_million_sample.csv\")\n","y_test = y_test[49:999999]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wFbB5H_I0lA3","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test.shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"dLQbNqMa0lFq","colab_type":"code","colab":{}},"cell_type":"code","source":["from keras.layers import Input, Embedding, LSTM, Dense, concatenate, SpatialDropout1D, Flatten\n","from keras.models import Model\n","embedding_n = 50\n","lookback_len = 50\n","in_ip = Input(shape=[lookback_len], name = 'ip')\n","emb_ip = Embedding(364779, embedding_n)(in_ip)\n","in_app = Input(shape=[lookback_len], name = 'app')\n","emb_app = Embedding(769, embedding_n)(in_app)\n","in_device = Input(shape=[lookback_len], name = 'device')\n","emb_device = Embedding(4228, embedding_n)(in_device)\n","in_os = Input(shape=[lookback_len], name = 'os')\n","emb_os = Embedding(957, embedding_n)(in_os)\n","in_channel = Input(shape=[lookback_len], name = 'channel')\n","emb_channel = Embedding(501, embedding_n)(in_channel) \n","in_hour = Input(shape=[lookback_len], name = 'hour')\n","emb_hour = Embedding(24, embedding_n)(in_hour)\n","in_day = Input(shape=[lookback_len], name = 'day')\n","emb_day = Embedding(31, embedding_n)(in_day)\n","in_wday = Input(shape=[lookback_len], name = 'wday')\n","emb_wday = Embedding(7, embedding_n)(in_wday)\n","embedded_n = concatenate([(emb_ip),(emb_app),(emb_device),(emb_os),(emb_channel),(emb_hour),(emb_day),(emb_wday)])\n","\n","s_dout = SpatialDropout1D(0.2)(embedded_n)\n","lstm1 = LSTM(128,dropout_U = 0.2, dropout_W = 0.2, return_sequences=True)(s_dout)\n","lstm2 = LSTM(128,dropout_U = 0.2, dropout_W = 0.2)(lstm1)\n","out = Dense(1, activation='sigmoid',input_shape=(50,))(lstm2)\n","model = Model(inputs=[in_ip,in_app,in_device,in_os,in_channel,in_hour,in_day,in_wday], outputs=out)\n","model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","\n","model.summary()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"c-gdKtvn0lD0","colab_type":"code","colab":{}},"cell_type":"code","source":["model.load_weights('./drive/My Drive/lstm_series_integration.h5')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ILD6wFi1H3aZ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"8QZ5ilSK0k--","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer = model.predict(x_test, batch_size=10000, verbose=2)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"wRm6_fbO0k9U","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test = y_test['is_attributed']"],"execution_count":0,"outputs":[]},{"metadata":{"id":"a49LjrLe7X3H","colab_type":"code","colab":{}},"cell_type":"code","source":["y_test[y_test==1].shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1ZKgX-hz4BOR","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer[ans_buffer>0.25].shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xUbtIKUm0k4K","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer_half_thres = ans_buffer.copy()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"DoTAWcvP4KC6","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer_half_thres[ans_buffer_half_thres >= 0.25] = 1\n","ans_buffer_half_thres[ans_buffer_half_thres < 0.25] = 0"],"execution_count":0,"outputs":[]},{"metadata":{"id":"y6GDnmNY850K","colab_type":"code","colab":{}},"cell_type":"code","source":["ans_buffer_half_thres[ans_buffer_half_thres==1].shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NZNlD5fI85np","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"4ufmOiYk4KId","colab_type":"code","colab":{}},"cell_type":"code","source":["from sklearn.metrics import confusion_matrix"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4086PhvY6GD2","colab_type":"code","colab":{}},"cell_type":"code","source":["plot_confusion_matrix(confusion_matrix(y_test,ans_buffer_half_thres),target_names=['not_attributed','attributed'],normalize=False)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"fvgvTIbn6GL8","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"MWYEJ1Fh6GPq","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"jbsImhRi6GTE","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"PpvjHqu86GYS","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"gPhgD4EP6Gf7","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Ovat3RDj6Gju","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"ADWvwnb36Gd5","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Gw6pqIg_6Gb4","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"5wtw08jB4KMR","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"Tin8ZTL84KXz","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FBhL0nAw4KbJ","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"pbK6Pzj54KWV","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"HYvl_4aU4KSr","colab_type":"code","colab":{}},"cell_type":"code","source":["import numpy as np\n","\n","\n","def plot_confusion_matrix(cm,\n","                          target_names,\n","                          title='Confusion matrix',\n","                          cmap=None,\n","                          normalize=True):\n","\n","    import matplotlib.pyplot as plt\n","    import numpy as np\n","    import itertools\n","\n","    accuracy = np.trace(cm) / float(np.sum(cm))\n","    misclass = 1 - accuracy\n","\n","    if cmap is None:\n","        cmap = plt.get_cmap('Blues')\n","\n","    plt.figure(figsize=(8, 6))\n","    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n","    plt.title(title)\n","    plt.colorbar()\n","\n","    if target_names is not None:\n","        tick_marks = np.arange(len(target_names))\n","        plt.xticks(tick_marks, target_names, rotation=45)\n","        plt.yticks(tick_marks, target_names)\n","\n","    if normalize:\n","        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n","\n","\n","    thresh = cm.max() / 1.5 if normalize else cm.max() / 2\n","    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n","        if normalize:\n","            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","        else:\n","            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n","                     horizontalalignment=\"center\",\n","                     color=\"white\" if cm[i, j] > thresh else \"black\")\n","\n","\n","    plt.tight_layout()\n","    plt.ylabel('True label')\n","    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n","    plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4UeEYCY04KQw","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"mkn-stBQ4KGn","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"lt_Xrj8bHCV9","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df = pd.read_csv(\"./drive/My Drive/x_train_million_samples.csv\", usecols=['ip','app','device','os', 'channel', 'hour', 'day','wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"85eYUs7LHCYh","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df.shape"],"execution_count":0,"outputs":[]},{"metadata":{"id":"8hUUeUpNHCbM","colab_type":"code","colab":{}},"cell_type":"code","source":["def create_dataset(dataset, look_back=50):\n","    dataX = []\n","    for i in range(len(dataset)-look_back):\n","        a = dataset[i:(i+look_back)]\n","        dataX.append(a)\n","    return np.array(dataX)\n","   \n","def get_keras_data(dataset):\n","    X = {\n","\t\t'ip': np.array(dataset.ip),\n","        'app': np.array(dataset.app),\n","        'channel': np.array(dataset.channel),\n","        'device': np.array(dataset.device),\n","        'os': np.array(dataset.os),\n","        'hour': np.array(dataset.hour),\n","        'day': np.array(dataset.day),\n","        'wday': np.array(dataset.wday),\n","    }\n","    return X"],"execution_count":0,"outputs":[]},{"metadata":{"id":"vEK-KKXlHCdu","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df = get_keras_data(train_df)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"huvKeE4II4iV","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df_serial1 = train_df "],"execution_count":0,"outputs":[]},{"metadata":{"id":"noED-HbsIiGK","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Ae-z74LEIiIj","colab_type":"code","colab":{}},"cell_type":"code","source":["train_df_serial1['ip'] = create_dataset(train_df_serial1['ip'])\n","train_df_serial1['app'] = create_dataset(train_df_serial1['app'])\n","train_df_serial1['channel'] = create_dataset(train_df_serial1['channel'])\n","train_df_serial1['device'] = create_dataset(train_df_serial1['device'])\n","train_df_serial1['os'] = create_dataset(train_df_serial1['os'])\n","train_df_serial1['hour'] = create_dataset(train_df_serial1['hour'])\n","train_df_serial1['day'] = create_dataset(train_df_serial1['day'])\n","train_df_serial1['wday'] = create_dataset(train_df_serial1['wday'])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4ydkSoHCIiLe","colab_type":"code","colab":{}},"cell_type":"code","source":["y_train = pd.read_csv(\"./drive/My Drive/y_train_million_samples.csv\")\n","y_train_series = y_train[49:999999]"],"execution_count":0,"outputs":[]},{"metadata":{"id":"B-kRqhadIiTV","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"p2hUhbI5QfPA","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"0h_lv8FvQfUS","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"CuBXy5gRQfWx","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"SvEM0OCjQfZm","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"pSC7z-amQfcR","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"JPK4_rNbQfeo","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"F0L4e8FrQfSA","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"FUKYmQYZIiWM","colab_type":"code","colab":{}},"cell_type":"code","source":["from keras import backend as K\n","K.tensorflow_backend._get_available_gpus()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"V-E-J7yBQd-h","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"o0xXfttPQeBP","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"UUYbsjBlQeFp","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"SzVaGmiDQeKU","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"PBbwOwZ-QeIt","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"RXxqJWiDQeET","colab_type":"code","colab":{}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]},{"metadata":{"id":"bxhi8otGIibR","colab_type":"code","colab":{}},"cell_type":"code","source":["from tensorflow.python.client import device_lib\n","\n","print(device_lib.list_local_devices())"],"execution_count":0,"outputs":[]},{"metadata":{"colab_type":"text","id":"1fr51oVCHRZU"},"cell_type":"markdown","source":["## Highlighted Features\n","### Seedbank\n","\n","Looking for Colab notebooks to learn from? Check out [Seedbank](https://tools.google.com/seedbank/), a place to discover interactive machine learning examples."]},{"metadata":{"colab_type":"text","id":"9wi5kfGdhK0R"},"cell_type":"markdown","source":["### TensorFlow execution"]},{"metadata":{"colab_type":"text","id":"S9GW-n-oYWIj"},"cell_type":"markdown","source":["Colaboratory allows you to execute TensorFlow code in your browser with a single click. The example below adds two matrices.\n","\n","$\\begin{bmatrix}\n","  1. & 1. & 1. \\\\\n","  1. & 1. & 1. \\\\\n","\\end{bmatrix} +\n","\\begin{bmatrix}\n","  1. & 2. & 3. \\\\\n","  4. & 5. & 6. \\\\\n","\\end{bmatrix} =\n","\\begin{bmatrix}\n","  2. & 3. & 4. \\\\\n","  5. & 6. & 7. \\\\\n","\\end{bmatrix}$"]},{"metadata":{"colab_type":"code","id":"oYZkU7ZN3CL0","colab":{}},"cell_type":"code","source":["import tensorflow as tf\n","\n","input1 = tf.ones((2, 3))\n","input2 = tf.reshape(tf.range(1, 7, dtype=tf.float32), (2, 3))\n","output = input1 + input2\n","\n","with tf.Session():\n","  result = output.eval()\n","result  "],"execution_count":0,"outputs":[]},{"metadata":{"colab_type":"text","id":"nwYF0E3Sjiy4"},"cell_type":"markdown","source":["### GitHub\n","\n","For a full discussion of interactions between Colab and GitHub, see [Using Colab with GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb). As a brief summary:\n","\n","To save a copy of your Colab notebook to Github, select *File → Save a copy to GitHub…*\n","\n","To load a specific notebook from github, append the github path to http://colab.research.google.com/github/.\n","For example to load this notebook in Colab: [https://github.com/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb](https://github.com/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb) use the following Colab URL: [https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb](https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/_index.ipynb)\n","\n"]},{"metadata":{"colab_type":"text","id":"yv2XIwi5hQ_g"},"cell_type":"markdown","source":["### Visualization"]},{"metadata":{"colab_type":"text","id":"rYs5mx2JZkmy"},"cell_type":"markdown","source":["Colaboratory includes widely used libraries like [matplotlib](https://matplotlib.org/), simplifying visualization."]},{"metadata":{"colab_type":"code","id":"xqrc5C-IaA5J","colab":{}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","\n","x = np.arange(20)\n","y = [x_i + np.random.randn(1) for x_i in x]\n","a, b = np.polyfit(x, y, 1)\n","_ = plt.plot(x, y, 'o', np.arange(20), a*np.arange(20)+b, '-')"],"execution_count":0,"outputs":[]},{"metadata":{"colab_type":"text","id":"AN_LRQ9NkOjs"},"cell_type":"markdown","source":["Want to use a new library?  `pip install` it at the top of the notebook. Then that library can be used anywhere else in the notebook. For recipes to import commonly used libraries, refer to the [importing libraries example notebook](/notebooks/snippets/importing_libraries.ipynb)."]},{"metadata":{"colab_type":"code","id":"FlQq0SUepQbd","colab":{}},"cell_type":"code","source":["!pip install -q matplotlib-venn\n","\n","from matplotlib_venn import venn2\n","_ = venn2(subsets = (3, 2, 1))"],"execution_count":0,"outputs":[]},{"metadata":{"colab_type":"text","id":"LxZ3dPzYnyNF"},"cell_type":"markdown","source":["### Forms\n","\n","Forms can be used to parameterize code. See the [forms example notebook](/notebooks/forms.ipynb) for more details."]},{"metadata":{"colab_type":"code","id":"FQ_Hx_9tn7uF","colab":{}},"cell_type":"code","source":["#@title Examples\n","\n","text = 'value' #@param \n","date_input = '2018-03-22' #@param {type:\"date\"}\n","number_slider = 0 #@param {type:\"slider\", min:-1, max:1, step:0.1}\n","dropdown = '1st option' #@param [\"1st option\", \"2nd option\", \"3rd option\"]\n"],"execution_count":0,"outputs":[]},{"metadata":{"colab_type":"text","id":"rTX3heEtu0b2"},"cell_type":"markdown","source":["### Local runtime support\n","\n","Colab  supports connecting to a Jupyter runtime on your local machine. For more information, see our [documentation](https://research.google.com/colaboratory/local-runtimes.html)."]}]}